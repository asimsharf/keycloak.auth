
server.port=4000
spring.main.banner-mode=off
spring.application.name=keycloak.auth
spring.application.jar=keycloak.auth-0.0.1-SNAPSHOT.jar

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=UTC

# Keycloak Server Configuration
OAUTH2_SCOPE=openid
OAUTH2_GRANT_TYPE=client_credentials
OAUTH2_REALM=auth-realm
OAUTH2_CLIENT_ID=auth-realm-client-id
OAUTH2_CLIENT_SECRET=9yg4Lbqz2bLNHUjpye8IQ42b6vgm0JlO

# Keycloak Server Configuration Access Server outside Docker
OAUTH2_JWK_URI=http://keycloak-server:8080/realms/auth-realm/protocol/openid-connect/certs
OAUTH2_TOKEN_URI=http://keycloak-server:8080/realms/auth-realm/protocol/openid-connect/token
OAUTH2_JWT_ISSUER_URI=http://keycloak-server:8080/realms/auth-realm

# Keycloak Server Configuration Access Server inside Docker
OAUTH2_AUTH_URI=http://keycloak-server:8080/realms/auth-realm/protocol/openid-connect/auth
OAUTH2_JWK_SET_URI=http://keycloak-server:8080/realms/auth-realm/protocol/openid-connect/certs

# Keycloak Settings
keycloak.auth-server-url=${OAUTH2_JWT_ISSUER_URI}
keycloak.realm=${OAUTH2_REALM}
keycloak.resource=${OAUTH2_CLIENT_ID}
keycloak.credentials.secret=${OAUTH2_CLIENT_SECRET}
keycloak.public-client=true

# Spring Security OAuth2 Client
spring.security.oauth2.client.registration.keycloak.client-id=${OAUTH2_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${OAUTH2_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.scope=${OAUTH2_SCOPE}
spring.security.oauth2.client.provider.keycloak.token-uri=${OAUTH2_TOKEN_URI}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${OAUTH2_JWT_ISSUER_URI}
spring.security.oauth2.client.provider.keycloak.authorization-uri=${OAUTH2_AUTH_URI}
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${OAUTH2_JWK_SET_URI}

# Hibernate Settings
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Hibernate Dialect for MySQL
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update

# Show SQL queries (optional)
spring.jpa.show-sql=true

# Always return JSON responses, even for errors
server.error.include-message=always
server.error.include-binding-errors=always
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

# Log full stack traces for better debugging
logging.level.org.springframework=ERROR
logging.level.org.springframework.web=DEBUG
logging.level.com.sudagoarth=DEBUG

# Hibernate Settings
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security.oauth2.client=DEBUG
logging.level.org.springframework.security.oauth2.client.authentication=DEBUG
logging.level.org.springframework.security.oauth2.client.endpoint=DEBUG
logging.level.org.springframework.security.oauth2.client.http=DEBUG
logging.level.org.springframework.security.oauth2.client.registration=DEBUG
logging.level.org.springframework.security.oauth2.client.web=DEBUG
logging.level.org.springframework.security.oauth2.config=DEBUG
logging.level.org.springframework.security.oauth2.core=DEBUG
logging.level.org.springframework.security.oauth2.jwt=DEBUG
logging.level.org.springframework.security.oauth2.jwt.JwtDecoder=DEBUG
logging.level.org.springframework.security.oauth2.jwt.JwtValidators=DEBUG
logging.level.org.springframework.security.oauth2.jwt.NimbusJwtDecoder=DEBUG
logging.level.org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport=DEBUG
logging.level.org.springframework.security.oauth2.jwt.NimbusJwtDecoderJwkSupport.NimbusJwtDecoderJwkSupport=DEBUG


# Actuator Endpoints Configuration (optional)
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=*
management.endpoint.web.exposure.include=*
management.info.env.enabled=true
management.info.build.enabled=true
management.info.git.enabled=true
management.info.app.enabled=true
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
info.app.name=${spring.application.name}
info.app.version=${spring.application.jar}
info.app.description=${spring.application.name} is a Spring Boot application
info.app.java.version=${java.version}
info.app.java.vendor=${java.vendor}
info.app.java.home=${java.home}
info.app.java.runtime.version=${java.runtime.version}
info.app.java.runtime.vendor=${java.runtime.vendor}


# MySQL Database Configuration (Docker)
spring.datasource.url=jdbc:mysql://mysql-db:3306/keycloakdb

# MySQL Database Configuration (Local)
# spring.datasource.url=jdbc:mysql://localhost:3306/keycloakdb
spring.datasource.username=keycloak
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.initialization-mode=always
